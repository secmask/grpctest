// Code generated by protoc-gen-go.
// source: greetings.proto
// DO NOT EDIT!

/*
Package gpc is a generated protocol buffer package.

It is generated from these files:
	greetings.proto

It has these top-level messages:
	Message
	HelloRequest
	HelloReply
	Empty
*/
package gpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Channel string `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Data    string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The request message containing the user's name.
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Message)(nil), "gpc.Message")
	proto.RegisterType((*HelloRequest)(nil), "gpc.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "gpc.HelloReply")
	proto.RegisterType((*Empty)(nil), "gpc.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Push(ctx context.Context, opts ...grpc.CallOption) (Greeter_PushClient, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/gpc.Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Push(ctx context.Context, opts ...grpc.CallOption) (Greeter_PushClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[0], c.cc, "/gpc.Greeter/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterPushClient{stream}
	return x, nil
}

type Greeter_PushClient interface {
	Send(*Message) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type greeterPushClient struct {
	grpc.ClientStream
}

func (x *greeterPushClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterPushClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	Push(Greeter_PushServer) error
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gpc.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).Push(&greeterPushServer{stream})
}

type Greeter_PushServer interface {
	SendAndClose(*Empty) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type greeterPushServer struct {
	grpc.ServerStream
}

func (x *greeterPushServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterPushServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gpc.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _Greeter_Push_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "greetings.proto",
}

func init() { proto.RegisterFile("greetings.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x50, 0x4d, 0x4b, 0xc4, 0x30,
	0x10, 0xdd, 0xac, 0xab, 0xd1, 0x61, 0x61, 0x71, 0x4e, 0xa5, 0x27, 0x09, 0x22, 0x3d, 0x15, 0xd1,
	0x83, 0x77, 0x41, 0xec, 0x45, 0x90, 0xfa, 0x0b, 0x62, 0x1d, 0x52, 0x21, 0x4d, 0x63, 0x93, 0x1e,
	0xf2, 0xef, 0xa5, 0xb3, 0x29, 0xf4, 0xf6, 0xde, 0xcb, 0xfb, 0x48, 0x02, 0x27, 0x33, 0x11, 0xc5,
	0x5f, 0x67, 0x42, 0xed, 0xa7, 0x31, 0x8e, 0x78, 0x61, 0x7c, 0xa7, 0x5e, 0x40, 0x7e, 0x50, 0x08,
	0xda, 0x10, 0x16, 0x20, 0xbb, 0x5e, 0x3b, 0x47, 0xb6, 0x10, 0x77, 0xa2, 0xba, 0x69, 0x57, 0x8a,
	0x08, 0x87, 0x1f, 0x1d, 0x75, 0xb1, 0x67, 0x99, 0xb1, 0x52, 0x70, 0x6c, 0xc8, 0xda, 0xb1, 0xa5,
	0xbf, 0x99, 0x42, 0x5c, 0x3c, 0x4e, 0x0f, 0x94, 0xa3, 0x8c, 0xd5, 0x03, 0x40, 0xf6, 0x78, 0x9b,
	0x96, 0xfe, 0xe1, 0x3c, 0xb5, 0xf6, 0x67, 0xaa, 0x24, 0x5c, 0xbe, 0x0d, 0x3e, 0xa6, 0x27, 0x0d,
	0xf2, 0x7d, 0xb9, 0x25, 0x4d, 0xf8, 0x08, 0xd7, 0x5f, 0x3a, 0x71, 0x1c, 0x6f, 0x6b, 0xe3, 0xbb,
	0x7a, 0x3b, 0x57, 0x9e, 0xb6, 0x92, 0xb7, 0x49, 0xed, 0xf0, 0x1e, 0x0e, 0x9f, 0x73, 0xe8, 0xf1,
	0xc8, 0x47, 0xf9, 0x55, 0x25, 0x30, 0xe3, 0x7a, 0xb5, 0xab, 0xc4, 0xeb, 0xbe, 0x11, 0xdf, 0x57,
	0xfc, 0x01, 0xcf, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x12, 0xa6, 0x2d, 0x5f, 0x13, 0x01, 0x00,
	0x00,
}
